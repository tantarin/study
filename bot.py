import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from game_logic import GameManager
from kafka_questions import KAFKA_QUESTIONS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
game_manager = GameManager()
game_manager.questions = KAFKA_QUESTIONS

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_learning')],
        [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data='rules')],
        [InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Apache Kafka –≤ –∏–≥—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def show_question(update: Update, context: CallbackContext, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    question = game_manager.get_current_question(user_id)
    if not question:
        if update.callback_query:
            update.callback_query.message.reply_text(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏! üéâ\n"
                "–ù–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        else:
            update.message.reply_text(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏! üéâ\n"
                "–ù–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        return

    keyboard = []
    for option in question.options:
        keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{option}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    progress = game_manager.get_level_progress(user_id)
    message_text = (
        f"–£—Ä–æ–≤–µ–Ω—å {progress['current_level']}\n"
        f"–û—á–∫–∏: {progress['score']}\n"
        f"–í–æ–ø—Ä–æ—Å {progress['questions_answered'] + 1} –∏–∑ {progress['questions_per_level']}\n\n"
        f"‚ùì {question.text}"
    )
    
    if update.callback_query:
        update.callback_query.message.reply_text(message_text, reply_markup=reply_markup)
    else:
        update.message.reply_text(message_text, reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    if not query:
        return
        
    try:
        query.answer()
    except Exception as e:
        logger.error(f"Error answering callback query: {e}")
        
    user_id = query.from_user.id
    
    if query.data == 'start_learning':
        query.message.reply_text(
            "üéÆ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ.\n\n"
            "–í –∏–≥—Ä–µ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–≤–Ω–∏, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ Kafka.\n"
            "–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data='level_1')]
            ])
        )
    elif query.data == 'rules':
        query.message.reply_text(
            "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
            "1. –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π\n"
            "2. –ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –≤–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã –æ Kafka\n"
            "3. –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏\n"
            "4. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤\n"
            "5. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n\n"
            "–£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏! üöÄ"
        )
    elif query.data == 'stats':
        state = game_manager.get_user_state(user_id)
        progress = game_manager.get_level_progress(user_id)
        query.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {progress['current_level']}\n"
            f"–í—Å–µ–≥–æ –æ—á–∫–æ–≤: {progress['score']}\n"
            f"–û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {progress['questions_answered']}\n"
            f"–û—á–∫–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {progress['points_to_next_level'] - progress['score']}"
        )
    elif query.data == 'level_1':
        show_question(update, context, user_id)
    elif query.data.startswith('answer_'):
        answer = query.data[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'answer_'
        question = game_manager.get_current_question(user_id)
        
        if game_manager.check_answer(user_id, question, answer):
            query.message.reply_text(
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{question.points} –æ—á–∫–æ–≤\n\n"
                f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {question.explanation}"
            )
        else:
            query.message.reply_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correct_answer}\n\n"
                f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {question.explanation}"
            )
        
        state = game_manager.get_user_state(user_id)
        if state.is_level_complete():
            if state.can_advance_level():
                state.advance_level()
                query.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {state.current_level}!\n\n"
                    "–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='level_1')]
                    ])
                )
            else:
                query.message.reply_text(
                    f"üèÅ –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                    f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å {state.points_to_next_level} –æ—á–∫–æ–≤.\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {state.score}\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data='level_1')]
                    ])
                )
        else:
            show_question(update, context, user_id)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 
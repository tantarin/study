import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from src.models import Question
from src.cards import (
    JAVA_CORE_CARDS,
    SPRING_CARDS,
    DATABASE_CARDS,
    DOCKER_K8S_CARDS,
    ALGORITHMS
)
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("Java Core", callback_data='java_core')],
        [InlineKeyboardButton("Spring Framework", callback_data='spring')],
        [InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data='database')],
        [InlineKeyboardButton("Docker & Kubernetes", callback_data='docker_k8s')],
        [InlineKeyboardButton("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data='algorithms')],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîÑ –°—Ç–∞—Ä—Ç", callback_data='restart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –ø–æ Java –∏ —Å–º–µ–∂–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –ø–æ Java –∏ —Å–º–µ–∂–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            reply_markup=reply_markup
        )

def show_java_core_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º Java Core"""
    keyboard = []
    for i, card in enumerate(JAVA_CORE_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'java_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Java Core:",
        reply_markup=reply_markup
    )

def show_spring_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º Spring"""
    keyboard = []
    for i, card in enumerate(SPRING_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'spring_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Spring:",
        reply_markup=reply_markup
    )

def show_database_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = []
    for i, card in enumerate(DATABASE_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'database_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=reply_markup
    )

def show_docker_k8s_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ Docker –∏ Kubernetes"""
    keyboard = []
    for i, card in enumerate(DOCKER_K8S_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'docker_k8s_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Docker –∏ Kubernetes:",
        reply_markup=reply_markup
    )

def show_algorithms_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for algo in ALGORITHMS:
        if algo.category not in categories:
            categories[algo.category] = []
        categories[algo.category].append(algo)
    
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, algos in categories.items():
        keyboard.append([InlineKeyboardButton(
            f"üìö {category.capitalize()} ({len(algos)})",
            callback_data=f"cat_{category}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:",
        reply_markup=reply_markup
    )

def create_theory_markdown(algorithms, category: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown —Ñ–∞–π–ª —Å —Ç–µ–æ—Ä–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.md', encoding='utf-8') as tmp_file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        tmp_file.write(f'# –¢–µ–æ—Ä–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É: {category.capitalize()}\n\n')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        for algo in algorithms:
            if algo.category == category:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                tmp_file.write(f'## {algo.title}\n\n')
                
                # –û–ø–∏—Å–∞–Ω–∏–µ
                tmp_file.write(f'### –û–ø–∏—Å–∞–Ω–∏–µ\n{algo.description}\n\n')
                
                # –°–ª–æ–∂–Ω–æ—Å—Ç—å
                tmp_file.write(f'### –°–ª–æ–∂–Ω–æ—Å—Ç—å\n{algo.complexity}\n\n')
                
                # –¢–µ–æ—Ä–∏—è
                tmp_file.write(f'### –¢–µ–æ—Ä–∏—è\n{algo.theory}\n\n')
                
                # –ü—Ä–∏–º–µ—Ä—ã
                if algo.examples:
                    tmp_file.write('### –ü—Ä–∏–º–µ—Ä—ã\n')
                    for i, example in enumerate(algo.examples, 1):
                        tmp_file.write(f'#### –ü—Ä–∏–º–µ—Ä {i}\n')
                        tmp_file.write(f'- –í—Ö–æ–¥: `{example.input_data}`\n')
                        tmp_file.write(f'- –í—ã—Ö–æ–¥: `{example.output_data}`\n')
                        tmp_file.write(f'- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {example.explanation}\n\n')
                
                # –ö–æ–¥ –Ω–∞ Java
                tmp_file.write('### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Java\n```java\n')
                tmp_file.write(algo.java_code)
                tmp_file.write('\n```\n\n')
                
                # –ö–æ–¥ –Ω–∞ Python (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if algo.python_code:
                    tmp_file.write('### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Python\n```python\n')
                    tmp_file.write(algo.python_code)
                    tmp_file.write('\n```\n\n')
                
                # –ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode
                if algo.leetcode_problems:
                    tmp_file.write('### –ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode\n')
                    for problem in algo.leetcode_problems:
                        tmp_file.write(f'- {problem}\n')
                    tmp_file.write('\n')
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                tmp_file.write(f'### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n{algo.visualization_url}\n\n')
                
                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
                tmp_file.write('---\n\n')
        
        return tmp_file.name

def show_algorithm_category(update: Update, context: CallbackContext, category: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    
    keyboard = []
    for i, algo in enumerate(ALGORITHMS):
        if algo.category == category:
            difficulty_emoji = "üü¢" if algo.difficulty == "easy" else "üü°" if algo.difficulty == "medium" else "üî¥"
            keyboard.append([InlineKeyboardButton(
                f"{difficulty_emoji} {algo.title}",
                callback_data=f"a_{i}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Markdown
    keyboard.append([InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–æ—Ä–∏—é –≤ Markdown", callback_data=f"md_{category}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="algorithms")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"–ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()}:",
        reply_markup=reply_markup
    )

def show_algorithm(update: Update, context: CallbackContext, algo_index: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ"""
    query = update.callback_query
    query.answer()
    
    algo = ALGORITHMS[algo_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"*{algo.title}*\n\n"
    message += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{algo.description}\n\n"
    message += f"‚ö°Ô∏è *–°–ª–æ–∂–Ω–æ—Å—Ç—å:*\n{algo.complexity}\n\n"
    message += f"üìö *–¢–µ–æ—Ä–∏—è:*\n{algo.theory}\n\n"
    message += f"üîó *–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:*\n{algo.visualization_url}\n\n"
    message += f"üíª *Java –∫–æ–¥:*\n```java\n{algo.java_code}\n```\n\n"
    
    if algo.python_code:
        message += f"üêç *Python –∫–æ–¥:*\n```python\n{algo.python_code}\n```\n\n"
    
    if algo.examples:
        message += "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        for i, example in enumerate(algo.examples, 1):
            message += f"\n–ü—Ä–∏–º–µ—Ä {i}:\n"
            message += f"–í—Ö–æ–¥: `{example.input_data}`\n"
            message += f"–í—ã—Ö–æ–¥: `{example.output_data}`\n"
            message += f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {example.explanation}\n"
    
    if algo.leetcode_problems:
        message += "\n*–ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode:*\n"
        for problem in algo.leetcode_problems:
            message += f"‚Ä¢ {problem}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"cat_{algo.category}")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
    if len(message) > 4096:
        parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                query.edit_message_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                query.message.reply_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.MARKDOWN
                )
    else:
        query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

def show_card(update: Update, context: CallbackContext, card: Question) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–æ—Ä–∏—è", callback_data="theory")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_section")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"*–í–æ–ø—Ä–æ—Å:*\n{card.text}\n\n*–û—Ç–≤–µ—Ç:*\n{card.correct_answer}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def show_theory(update: Update, context: CallbackContext, card: Question) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–æ—Ä–∏—é –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É", callback_data="back_to_card")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É", callback_data="back_to_section")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"*–¢–µ–æ—Ä–∏—è:*\n\n{card.theory}\n\n*–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n{card.theory_summary}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    if data == "java_core":
        show_java_core_menu(update, context)
    elif data == "spring":
        show_spring_menu(update, context)
    elif data == "database":
        show_database_menu(update, context)
    elif data == "docker_k8s":
        show_docker_k8s_menu(update, context)
    elif data == "algorithms":
        show_algorithms_menu(update, context)
    elif data.startswith("cat_"):
        category = data[4:]
        show_algorithm_category(update, context, category)
    elif data.startswith("a_"):
        algo_index = int(data[2:])
        show_algorithm(update, context, algo_index)
    elif data.startswith("md_"):
        category = data[3:]
        # –°–æ–∑–¥–∞–µ–º Markdown
        md_path = create_theory_markdown(ALGORITHMS, category)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(md_path, 'rb') as md_file:
            query.message.reply_document(
                document=md_file,
                filename=f'theory_{category}.md',
                caption=f'–¢–µ–æ—Ä–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É: {category.capitalize()}'
            )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(md_path)
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        query.answer("Markdown —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    elif data == "back":
        start(update, context)
    elif data == "back_to_section":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        current_section = context.user_data.get('current_section', 'main')
        if current_section == 'java_core':
            show_java_core_menu(update, context)
        elif current_section == 'spring':
            show_spring_menu(update, context)
        elif current_section == 'database':
            show_database_menu(update, context)
        elif current_section == 'docker_k8s':
            show_docker_k8s_menu(update, context)
        elif current_section == 'algorithms':
            show_algorithms_menu(update, context)
    elif data == "back_to_card":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        current_card = context.user_data.get('current_card')
        if current_card:
            show_card(update, context, current_card)
    elif data == "theory":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        current_card = context.user_data.get('current_card')
        if current_card:
            show_theory(update, context, current_card)
    elif data.startswith("java_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Java Core
        index = int(data.split("_")[-1])
        show_java_topic(update, context, index)
    elif data.startswith("spring_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Spring
        index = int(data.split("_")[-1])
        show_spring_topic(update, context, index)
    elif data.startswith("database_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Database
        index = int(data.split("_")[-1])
        show_database_topic(update, context, index)
    elif data.startswith("docker_k8s_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Docker & Kubernetes
        index = int(data.split("_")[-1])
        show_docker_k8s_topic(update, context, index)

def show_java_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Java Core"""
    card = JAVA_CORE_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='java_core')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_spring_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Spring"""
    card = SPRING_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='spring')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_database_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    card = DATABASE_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='database')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_docker_k8s_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Docker –∏ Kubernetes"""
    card = DOCKER_K8S_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='docker_k8s')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è"""
    user_id = update.callback_query.from_user.id
    if user_id not in user_states:
        user_states[user_id] = {
            'java_core': set(),
            'spring': set(),
            'database': set(),
            'docker_k8s': set()
        }
    
    java_core_learned = len(user_states[user_id]['java_core'])
    spring_learned = len(user_states[user_id]['spring'])
    database_learned = len(user_states[user_id]['database'])
    docker_k8s_learned = len(user_states[user_id]['docker_k8s'])
    
    message = f"*–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    message += f"Java Core: {java_core_learned}/{len(JAVA_CORE_CARDS)} —Ç–µ–º\n"
    message += f"Spring: {spring_learned}/{len(SPRING_CARDS)} —Ç–µ–º\n"
    message += f"–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {database_learned}/{len(DATABASE_CARDS)} —Ç–µ–º\n"
    message += f"Docker & Kubernetes: {docker_k8s_learned}/{len(DOCKER_K8S_CARDS)} —Ç–µ–º"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 
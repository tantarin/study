import os
import logging
import re
import html
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from src.models import Question
from src.cards import (
    JAVA_CORE_CARDS,
    SPRING_CARDS,
    DATABASE_CARDS,
    DOCKER_K8S_CARDS,
    ALGORITHMS
)
from src.cards.algorithms import ALGORITHMS
from src.cards.system_design import SYSTEM_DESIGN_CARDS
import tempfile
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

CATEGORIES = {
    "algorithms": {
        "name": "üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º—ã",
        "cards": ALGORITHMS
    },
    "system_design": {
        "name": "üèó System Design",
        "cards": SYSTEM_DESIGN_CARDS
    }
}

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )

def create_full_theory_markdown() -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown —Ñ–∞–π–ª —Å–æ –≤—Å–µ–π —Ç–µ–æ—Ä–∏–µ–π –∏–∑ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.md', encoding='utf-8') as tmp_file:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        tmp_file.write('# –ü–æ–ª–Ω–∞—è —Ç–µ–æ—Ä–∏—è –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º\n\n')
        
        # Java Core
        tmp_file.write('# Java Core\n\n')
        for card in JAVA_CORE_CARDS:
            tmp_file.write(f'## {card.text}\n\n')
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{card.theory}\n\n')
            tmp_file.write('### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n')
            tmp_file.write(f'{card.explanation}\n\n')
            tmp_file.write('---\n\n')
        
        # Spring Framework
        tmp_file.write('# Spring Framework\n\n')
        for card in SPRING_CARDS:
            tmp_file.write(f'## {card.text}\n\n')
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{card.theory}\n\n')
            tmp_file.write('### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n')
            tmp_file.write(f'{card.explanation}\n\n')
            tmp_file.write('---\n\n')
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tmp_file.write('# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n')
        for card in DATABASE_CARDS:
            tmp_file.write(f'## {card.text}\n\n')
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{card.theory}\n\n')
            tmp_file.write('### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n')
            tmp_file.write(f'{card.explanation}\n\n')
            tmp_file.write('---\n\n')
        
        # Docker –∏ Kubernetes
        tmp_file.write('# Docker –∏ Kubernetes\n\n')
        for card in DOCKER_K8S_CARDS:
            tmp_file.write(f'## {card.text}\n\n')
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{card.theory}\n\n')
            tmp_file.write('### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n')
            tmp_file.write(f'{card.explanation}\n\n')
            tmp_file.write('---\n\n')
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º—ã
        tmp_file.write('# –ê–ª–≥–æ—Ä–∏—Ç–º—ã\n\n')
        for algo in ALGORITHMS:
            tmp_file.write(f'## {algo.title}\n\n')
            tmp_file.write('### –û–ø–∏—Å–∞–Ω–∏–µ\n')
            tmp_file.write(f'{algo.description}\n\n')
            tmp_file.write('### –°–ª–æ–∂–Ω–æ—Å—Ç—å\n')
            tmp_file.write(f'{algo.complexity}\n\n')
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{algo.theory}\n\n')
            if algo.examples:
                tmp_file.write('### –ü—Ä–∏–º–µ—Ä—ã\n')
                for i, example in enumerate(algo.examples, 1):
                    tmp_file.write(f'#### –ü—Ä–∏–º–µ—Ä {i}\n')
                    tmp_file.write(f'- –í—Ö–æ–¥: `{example.input_data}`\n')
                    tmp_file.write(f'- –í—ã—Ö–æ–¥: `{example.output_data}`\n')
                    tmp_file.write(f'- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {example.explanation}\n\n')
            tmp_file.write('### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Java\n```java\n')
            tmp_file.write(f'{algo.java_code}\n```\n\n')
            if algo.python_code:
                tmp_file.write('### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Python\n```python\n')
                tmp_file.write(f'{algo.python_code}\n```\n\n')
            if algo.leetcode_problems:
                tmp_file.write('### –ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode\n')
                for problem in algo.leetcode_problems:
                    tmp_file.write(f'- {problem}\n')
                tmp_file.write('\n')
            tmp_file.write('---\n\n')
        
        return tmp_file.name

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("Java Core", callback_data='java_core')],
        [InlineKeyboardButton("Spring Framework", callback_data='spring')],
        [InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data='database')],
        [InlineKeyboardButton("Docker & Kubernetes", callback_data='docker_k8s')],
        [InlineKeyboardButton("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data='algorithms')],
        [InlineKeyboardButton("üèó System Design", callback_data='system_design')],
        [InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å –≤—Å—é —Ç–µ–æ—Ä–∏—é", callback_data='md_full')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –ø–æ Java –∏ —Å–º–µ–∂–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –ø–æ Java –∏ —Å–º–µ–∂–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            reply_markup=reply_markup
        )

def show_java_core_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º Java Core"""
    keyboard = []
    for i, card in enumerate(JAVA_CORE_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'java_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Java Core:",
        reply_markup=reply_markup
    )

def show_spring_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º Spring"""
    keyboard = []
    for i, card in enumerate(SPRING_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'spring_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Spring:",
        reply_markup=reply_markup
    )

def create_database_markdown(cards) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown —Ñ–∞–π–ª —Å —Ç–µ–æ—Ä–∏–µ–π –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.md', encoding='utf-8') as tmp_file:
        tmp_file.write('# –¢–µ–æ—Ä–∏—è –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö\n\n')
        
        for card in cards:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã
            tmp_file.write(f'## {card.text}\n\n')
            
            # –¢–µ–æ—Ä–∏—è
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{card.theory}\n\n')
            
            # –ü—Ä–∏–º–µ—Ä—ã
            tmp_file.write('### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n')
            tmp_file.write(f'{card.explanation}\n\n')
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
            tmp_file.write('---\n\n')
        
        return tmp_file.name

def show_database_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = []
    for i, card in enumerate(DATABASE_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'database_topic_{i}'
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
    keyboard.append([InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–æ—Ä–∏—é –≤ Markdown", callback_data="md_database")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=reply_markup
    )

def create_docker_k8s_markdown(cards) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown —Ñ–∞–π–ª —Å —Ç–µ–æ—Ä–∏–µ–π –ø–æ Docker –∏ Kubernetes"""
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.md', encoding='utf-8') as tmp_file:
        tmp_file.write('# –¢–µ–æ—Ä–∏—è –ø–æ Docker –∏ Kubernetes\n\n')
        
        for card in cards:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã
            tmp_file.write(f'## {card.text}\n\n')
            
            # –¢–µ–æ—Ä–∏—è
            tmp_file.write('### –¢–µ–æ—Ä–∏—è\n')
            tmp_file.write(f'{card.theory}\n\n')
            
            # –ü—Ä–∏–º–µ—Ä—ã
            tmp_file.write('### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n')
            tmp_file.write(f'{card.explanation}\n\n')
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
            tmp_file.write('---\n\n')
        
        return tmp_file.name

def show_docker_k8s_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ Docker –∏ Kubernetes"""
    keyboard = []
    for i, card in enumerate(DOCKER_K8S_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'docker_k8s_topic_{i}'
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
    keyboard.append([InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–æ—Ä–∏—é –≤ Markdown", callback_data="md_docker_k8s")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Docker –∏ Kubernetes:",
        reply_markup=reply_markup
    )

def show_algorithms_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for algo in ALGORITHMS:
        if algo.category not in categories:
            categories[algo.category] = []
        categories[algo.category].append(algo)
    
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, algos in categories.items():
        keyboard.append([InlineKeyboardButton(
            f"üìö {category.capitalize()} ({len(algos)})",
            callback_data=f"cat_{category}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:",
        reply_markup=reply_markup
    )

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à
    text = text.replace('\\', '\\\\')
    
    # –ó–∞—Ç–µ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

def create_theory_markdown(algorithms, category: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown —Ñ–∞–π–ª —Å —Ç–µ–æ—Ä–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.md', encoding='utf-8') as tmp_file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        tmp_file.write(f'# –¢–µ–æ—Ä–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É: {category.capitalize()}\n\n')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        for algo in algorithms:
            if algo.category == category:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                tmp_file.write(f'## {algo.title}\n\n')
                
                # –û–ø–∏—Å–∞–Ω–∏–µ
                tmp_file.write(f'### –û–ø–∏—Å–∞–Ω–∏–µ\n{algo.description}\n\n')
                
                # –°–ª–æ–∂–Ω–æ—Å—Ç—å
                tmp_file.write(f'### –°–ª–æ–∂–Ω–æ—Å—Ç—å\n{algo.complexity}\n\n')
                
                # –¢–µ–æ—Ä–∏—è
                tmp_file.write(f'### –¢–µ–æ—Ä–∏—è\n{algo.theory}\n\n')
                
                # –ü—Ä–∏–º–µ—Ä—ã
                if algo.examples:
                    tmp_file.write('### –ü—Ä–∏–º–µ—Ä—ã\n')
                    for i, example in enumerate(algo.examples, 1):
                        tmp_file.write(f'#### –ü—Ä–∏–º–µ—Ä {i}\n')
                        tmp_file.write(f'- –í—Ö–æ–¥: `{example.input_data}`\n')
                        tmp_file.write(f'- –í—ã—Ö–æ–¥: `{example.output_data}`\n')
                        tmp_file.write(f'- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {example.explanation}\n\n')
                
                # –ö–æ–¥ –Ω–∞ Java
                tmp_file.write('### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Java\n```java\n')
                tmp_file.write(algo.java_code)
                tmp_file.write('\n```\n\n')
                
                # –ö–æ–¥ –Ω–∞ Python (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if algo.python_code:
                    tmp_file.write('### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Python\n```python\n')
                    tmp_file.write(algo.python_code)
                    tmp_file.write('\n```\n\n')
                
                # –ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode
                if algo.leetcode_problems:
                    tmp_file.write('### –ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode\n')
                    for problem in algo.leetcode_problems:
                        tmp_file.write(f'- {problem}\n')
                    tmp_file.write('\n')
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                tmp_file.write(f'### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n{algo.visualization_url}\n\n')
                
                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
                tmp_file.write('---\n\n')
        
        return tmp_file.name

def show_algorithm_category(update: Update, context: CallbackContext, category: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    
    keyboard = []
    for i, algo in enumerate(ALGORITHMS):
        if algo.category == category:
            difficulty_emoji = "üü¢" if algo.difficulty == "easy" else "üü°" if algo.difficulty == "medium" else "üî¥"
            keyboard.append([InlineKeyboardButton(
                f"{difficulty_emoji} {algo.title}",
                callback_data=f"a_{i}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Markdown
    keyboard.append([InlineKeyboardButton("üìù –°–∫–∞—á–∞—Ç—å —Ç–µ–æ—Ä–∏—é –≤ Markdown", callback_data=f"md_{category}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="algorithms")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"–ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.capitalize()}:",
        reply_markup=reply_markup
    )

def show_algorithm(update: Update, context: CallbackContext, algo_index: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ"""
    query = update.callback_query
    algo = ALGORITHMS[algo_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    message = f"<b>{html.escape(algo.title)}</b>\n\n"
    message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{html.escape(algo.description)}\n\n"
    message += f"‚ö°Ô∏è <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b>\n{html.escape(algo.complexity)}\n\n"
    message += f"üìö <b>–¢–µ–æ—Ä–∏—è:</b>\n{html.escape(algo.theory)}\n\n"
    message += f"üîó <b>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n{html.escape(algo.visualization_url)}\n\n"
    
    # –ö–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    message += f"üíª <b>Java –∫–æ–¥:</b>\n<pre>{html.escape(algo.java_code)}</pre>\n\n"
    
    if algo.python_code:
        message += f"üêç <b>Python –∫–æ–¥:</b>\n<pre>{html.escape(algo.python_code)}</pre>\n\n"
    
    if algo.examples:
        message += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        for i, example in enumerate(algo.examples, 1):
            message += f"\n–ü—Ä–∏–º–µ—Ä {i}:\n"
            message += f"–í—Ö–æ–¥: <code>{html.escape(example.input_data)}</code>\n"
            message += f"–í—ã—Ö–æ–¥: <code>{html.escape(example.output_data)}</code>\n"
            message += f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {html.escape(example.explanation)}\n"
    
    if algo.leetcode_problems:
        message += "\n<b>–ó–∞–¥–∞—á–∏ –Ω–∞ LeetCode:</b>\n"
        for problem in algo.leetcode_problems:
            message += f"‚Ä¢ {html.escape(problem)}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"cat_{algo.category}")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
    if len(message) > 4096:
        parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                query.edit_message_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.HTML
                )
            else:
                query.message.reply_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.HTML
                )
    else:
        query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

def show_card(update: Update, context: CallbackContext, card: Question) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–æ—Ä–∏—è", callback_data="theory")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_section")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"*–í–æ–ø—Ä–æ—Å:*\n{card.text}\n\n*–û—Ç–≤–µ—Ç:*\n{card.correct_answer}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def show_theory(update: Update, context: CallbackContext, card: Question) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–æ—Ä–∏—é –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É", callback_data="back_to_card")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É", callback_data="back_to_section")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"*–¢–µ–æ—Ä–∏—è:*\n\n{card.theory}\n\n*–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n{card.theory_summary}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def show_system_design_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º System Design"""
    keyboard = []
    for i, card in enumerate(SYSTEM_DESIGN_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'system_design_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ System Design:",
        reply_markup=reply_markup
    )

def process_code_blocks(text: str, language: str = None) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ"""
    if not text:
        return ""
        
    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if not language:
        code_blocks = re.findall(r'```(\w+)?\n(.*?)```', text, re.DOTALL)
        if code_blocks:
            language = code_blocks[0][0] or 'text'
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –±–ª–æ–∫–∞–º –∫–æ–¥–∞
    parts = text.split('```')
    result = []
    
    for i, part in enumerate(parts):
        if i % 2 == 0:  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
            result.append(escape_markdown(part))
        else:  # –ë–ª–æ–∫ –∫–æ–¥–∞
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –∫–æ–¥
            if '\n' in part:
                lang, code = part.split('\n', 1)
            else:
                lang, code = language or 'text', part
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
            code_lines = code.strip().split('\n')
            formatted_code = '\n'.join(code_lines)
            result.append(f'\n```{lang}\n{formatted_code}\n```\n')
    
    return ''.join(result)

def show_system_design_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ System Design"""
    card = SYSTEM_DESIGN_CARDS[topic_index]
    message = f"*{escape_markdown(card.text)}*\n\n"
    message += process_code_blocks(card.theory)
    message += "\n\n*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n"
    message += process_code_blocks(card.explanation)
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='system_design')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4096:
        parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                update.callback_query.edit_message_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.callback_query.message.reply_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.MARKDOWN
                )
    else:
        update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    if data == "java_core":
        show_java_core_menu(update, context)
    elif data == "spring":
        show_spring_menu(update, context)
    elif data == "database":
        show_database_menu(update, context)
    elif data == "docker_k8s":
        show_docker_k8s_menu(update, context)
    elif data == "algorithms":
        show_algorithms_menu(update, context)
    elif data == "system_design":
        show_system_design_menu(update, context)
    elif data.startswith("system_design_topic_"):
        topic_index = int(data.split("_")[-1])
        show_system_design_topic(update, context, topic_index)
    elif data.startswith("cat_"):
        category = data[4:]
        show_algorithm_category(update, context, category)
    elif data.startswith("a_"):
        algo_index = int(data[2:])
        show_algorithm(update, context, algo_index)
    elif data.startswith("md_"):
        category = data[3:]
        if category == "full":
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            from src.theory_server import open_theory_in_browser
            open_theory_in_browser()
            query.message.reply_text("–¢–µ–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ! –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
            query.answer("–¢–µ–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
        elif category == "database":
            # –°–æ–∑–¥–∞–µ–º Markdown –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            md_path = create_database_markdown(DATABASE_CARDS)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(md_path, 'rb') as md_file:
                query.message.reply_document(
                    document=md_file,
                    filename='theory_database.md',
                    caption='–¢–µ–æ—Ä–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É: –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(md_path)
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            query.answer("Markdown —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        elif category == "docker_k8s":
            # –°–æ–∑–¥–∞–µ–º Markdown –¥–ª—è Docker –∏ Kubernetes
            md_path = create_docker_k8s_markdown(DOCKER_K8S_CARDS)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(md_path, 'rb') as md_file:
                query.message.reply_document(
                    document=md_file,
                    filename='theory_docker_k8s.md',
                    caption='–¢–µ–æ—Ä–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É: Docker –∏ Kubernetes'
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(md_path)
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            query.answer("Markdown —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            # –°–æ–∑–¥–∞–µ–º Markdown –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            md_path = create_theory_markdown(ALGORITHMS, category)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(md_path, 'rb') as md_file:
                query.message.reply_document(
                    document=md_file,
                    filename=f'theory_{category}.md',
                    caption=f'–¢–µ–æ—Ä–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É: {category.capitalize()}'
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(md_path)
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            query.answer("Markdown —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    elif data == "back":
        start(update, context)
    elif data == "back_to_section":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        current_section = context.user_data.get('current_section', 'main')
        if current_section == 'java_core':
            show_java_core_menu(update, context)
        elif current_section == 'spring':
            show_spring_menu(update, context)
        elif current_section == 'database':
            show_database_menu(update, context)
        elif current_section == 'docker_k8s':
            show_docker_k8s_menu(update, context)
        elif current_section == 'algorithms':
            show_algorithms_menu(update, context)
        elif current_section == 'system_design':
            show_system_design_menu(update, context)
    elif data == "back_to_card":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        current_card = context.user_data.get('current_card')
        if current_card:
            show_card(update, context, current_card)
    elif data == "theory":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        current_card = context.user_data.get('current_card')
        if current_card:
            show_theory(update, context, current_card)
    elif data.startswith("java_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Java Core
        index = int(data.split("_")[-1])
        show_java_topic(update, context, index)
    elif data.startswith("spring_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Spring
        index = int(data.split("_")[-1])
        show_spring_topic(update, context, index)
    elif data.startswith("database_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Database
        index = int(data.split("_")[-1])
        show_database_topic(update, context, index)
    elif data.startswith("docker_k8s_topic_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º Docker & Kubernetes
        index = int(data.split("_")[-1])
        show_docker_k8s_topic(update, context, index)

def show_java_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Java Core"""
    card = JAVA_CORE_CARDS[int(topic_index)]
    message = f"*{escape_markdown(card.text)}*\n\n"
    message += process_code_blocks(card.theory, 'java')
    message += "\n\n*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n"
    message += process_code_blocks(card.explanation, 'java')
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='java_core')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4096:
        parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                update.callback_query.edit_message_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.callback_query.message.reply_text(
                    text=part,
                    reply_markup=reply_markup if i == len(parts)-1 else None,
                    parse_mode=ParseMode.MARKDOWN
                )
    else:
        update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

def show_spring_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Spring"""
    card = SPRING_CARDS[int(topic_index)]
    message = f"*{escape_markdown(card.text)}*\n\n"
    message += process_code_blocks(card.theory, 'java')
    message += "\n\n*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n"
    message += process_code_blocks(card.explanation, 'java')
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='spring')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )

def show_database_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    card = DATABASE_CARDS[int(topic_index)]
    message = f"*{escape_markdown(card.text)}*\n\n"
    message += process_code_blocks(card.theory, 'sql')
    message += "\n\n*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n"
    message += process_code_blocks(card.explanation, 'sql')
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='database')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )

def show_docker_k8s_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Docker –∏ Kubernetes"""
    card = DOCKER_K8S_CARDS[int(topic_index)]
    message = f"*{escape_markdown(card.text)}*\n\n"
    message += process_code_blocks(card.theory, 'yaml')
    message += "\n\n*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n"
    message += process_code_blocks(card.explanation, 'yaml')
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='docker_k8s')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 
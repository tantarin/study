import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from src.cards import (
    JAVA_CORE_CARDS,
    SPRING_CARDS,
    DATABASE_CARDS,
    DOCKER_K8S_CARDS,
    ALGORITHMS_CARDS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("Java Core", callback_data='java_core')],
        [InlineKeyboardButton("Spring Framework", callback_data='spring')],
        [InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data='database')],
        [InlineKeyboardButton("Docker & Kubernetes", callback_data='docker_k8s')],
        [InlineKeyboardButton("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data='algorithms')],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîÑ –°—Ç–∞—Ä—Ç", callback_data='restart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –ø–æ Java –∏ —Å–º–µ–∂–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    query.answer()
    
    if query.data == 'restart':
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.callback_query.from_user.id
        if user_id in user_states:
            del user_states[user_id]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("Java Core", callback_data='java_core')],
            [InlineKeyboardButton("Spring Framework", callback_data='spring')],
            [InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data='database')],
            [InlineKeyboardButton("Docker & Kubernetes", callback_data='docker_k8s')],
            [InlineKeyboardButton("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data='algorithms')],
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üîÑ –°—Ç–∞—Ä—Ç", callback_data='restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.callback_query.edit_message_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –ø–æ Java –∏ —Å–º–µ–∂–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
            reply_markup=reply_markup
        )
    elif query.data == 'java_core':
        show_java_core_menu(update, context)
    elif query.data == 'spring':
        show_spring_menu(update, context)
    elif query.data == 'database':
        show_database_menu(update, context)
    elif query.data == 'docker_k8s':
        show_docker_k8s_menu(update, context)
    elif query.data == 'algorithms':
        show_algorithms_menu(update, context)
    elif query.data == 'stats':
        show_stats(update, context)
    elif query.data == 'back':
        show_main_menu(update, context)
    elif query.data.startswith('java_topic_'):
        show_java_topic(update, context, query.data.split('_')[2])
    elif query.data.startswith('spring_topic_'):
        show_spring_topic(update, context, query.data.split('_')[2])
    elif query.data.startswith('database_topic_'):
        show_database_topic(update, context, query.data.split('_')[2])
    elif query.data.startswith('docker_k8s_topic_'):
        show_docker_k8s_topic(update, context, query.data.split('_')[3])
    elif query.data.startswith('algorithms_topic_'):
        show_algorithms_topic(update, context, query.data.split('_')[2])

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("Java Core", callback_data='java_core')],
        [InlineKeyboardButton("Spring Framework", callback_data='spring')],
        [InlineKeyboardButton("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data='database')],
        [InlineKeyboardButton("Docker & Kubernetes", callback_data='docker_k8s')],
        [InlineKeyboardButton("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data='algorithms')],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîÑ –°—Ç–∞—Ä—Ç", callback_data='restart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:',
        reply_markup=reply_markup
    )

def show_java_core_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º Java Core"""
    keyboard = []
    for i, card in enumerate(JAVA_CORE_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'java_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Java Core:",
        reply_markup=reply_markup
    )

def show_spring_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º Spring"""
    keyboard = []
    for i, card in enumerate(SPRING_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'spring_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Spring:",
        reply_markup=reply_markup
    )

def show_database_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = []
    for i, card in enumerate(DATABASE_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'database_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=reply_markup
    )

def show_docker_k8s_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ Docker –∏ Kubernetes"""
    keyboard = []
    for i, card in enumerate(DOCKER_K8S_CARDS):
        keyboard.append([InlineKeyboardButton(
            card.text,
            callback_data=f'docker_k8s_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ Docker –∏ Kubernetes:",
        reply_markup=reply_markup
    )

def show_algorithms_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º"""
    keyboard = []
    for i, card in enumerate(ALGORITHMS_CARDS):
        keyboard.append([InlineKeyboardButton(
            card["question"],
            callback_data=f'algorithms_topic_{i}'
        )])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º:",
        reply_markup=reply_markup
    )

def show_java_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Java Core"""
    card = JAVA_CORE_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='java_core')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_spring_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Spring"""
    card = SPRING_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='spring')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_database_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    card = DATABASE_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='database')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_docker_k8s_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ Docker –∏ Kubernetes"""
    card = DOCKER_K8S_CARDS[int(topic_index)]
    message = f"*{card.text}*\n\n"
    message += f"{card.theory}\n\n"
    message += f"*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:*\n{card.explanation}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='docker_k8s')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_algorithms_topic(update: Update, context: CallbackContext, topic_index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º"""
    card = ALGORITHMS_CARDS[int(topic_index)]
    message = f"*–í–æ–ø—Ä–æ—Å:*\n{card['question']}\n\n"
    message += f"*–û—Ç–≤–µ—Ç:*\n{card['answer']}"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='algorithms')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def show_stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è"""
    user_id = update.callback_query.from_user.id
    if user_id not in user_states:
        user_states[user_id] = {
            'java_core': set(),
            'spring': set(),
            'database': set(),
            'docker_k8s': set()
        }
    
    java_core_learned = len(user_states[user_id]['java_core'])
    spring_learned = len(user_states[user_id]['spring'])
    database_learned = len(user_states[user_id]['database'])
    docker_k8s_learned = len(user_states[user_id]['docker_k8s'])
    
    message = f"*–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    message += f"Java Core: {java_core_learned}/{len(JAVA_CORE_CARDS)} —Ç–µ–º\n"
    message += f"Spring: {spring_learned}/{len(SPRING_CARDS)} —Ç–µ–º\n"
    message += f"–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {database_learned}/{len(DATABASE_CARDS)} —Ç–µ–º\n"
    message += f"Docker & Kubernetes: {docker_k8s_learned}/{len(DOCKER_K8S_CARDS)} —Ç–µ–º"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 